// Table of Contents
//
// Convert px into rem
// Color contrast
// Gradients
// Hover
// Transition
// Border radius
// Ascending
// Starts at zero
// Breakpoints


// Convert px into rem
@function rem($pixels, $context: 16) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}


// Color contrast
@function color-yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $yiq-text-dark;
  } @else {
    @return $yiq-text-light;
  }
}


// Gradients
@mixin gradient-bg($color) {
  background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x;
}


// Hover
@mixin hover {
  &:hover { @content; }
}
@mixin hover-focus {
  &:hover,
  &:focus {
    @content;
  }
}
@mixin plain-hover-focus {
  &,
  &:hover,
  &:focus {
    @content;
  }
}
@mixin hover-focus-active {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}


// Transition
@import "mixins/transition";


// Border radius
@import "mixins/border-radius";


// Ascending
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}


// Starts at zero
@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}


// Breakpoints
@import "mixins/breakpoints";
